package controllers

import (
	"net/http"
	"strconv"
	"{{projectname}}/api/responses"
	"{{projectname}}/api/services"
	"{{projectname}}/infrastructure"
	"{{projectname}}/models"
	"{{projectname}}/utils"
	"{{projectname}}/errors"

	"github.com/gin-gonic/gin"
)

// {{ucresource}}Controller -> struct
type {{ucresource}}Controller struct {
	logger                 infrastructure.Logger
	{{ucresource}}Service  services.{{ucresource}}Service
}

// New{{ucresource}}Controller -> constructor
func New{{ucresource}}Controller(
	logger infrastructure.Logger,
	{{ucresource}}Service services.{{ucresource}}Service,
) {{ucresource}}Controller {
	return {{ucresource}}Controller{
		logger:                  logger,
		{{ucresource}}Service:  {{ucresource}}Service,
	}
}

// Create{{ucresource}} -> Create {{ucresource}}
// @Summary				Create {{ucresource}}
// @Description			Create {{ucresource}}
// @Param				JSON body string true "Enter JSON" SchemaExample()
// @Param Authorization header string true "Insert your access token" default(Bearer <Add access token here>)
// @Produce				application/json
// @Tags				{{ucresource}}
// @Success				200 {object} responses.Success "OK"
// @Router				/{{pluralresourcetable}} [post]
func (cc {{ucresource}}Controller) Create{{ucresource}}(c *gin.Context) {
	{{lcresource}} := models.{{ucresource}}{}

	if err := c.ShouldBindJSON(&{{lcresource}}); err != nil {
		cc.logger.Zap.Error("Error [Create{{ucresource}}] (ShouldBindJson) : ", err)
		err := errors.BadRequest.Wrap(err, "Failed to bind {{ucresource}}")
		responses.HandleError(c, err)
		return
	}

	if _, err := cc.{{ucresource}}Service.Create{{ucresource}}({{lcresource}}); err != nil {
		cc.logger.Zap.Error("Error [Create{{ucresource}}] [db Create{{ucresource}}]: ", err.Error())
		err := errors.BadRequest.Wrap(err, "Failed To Create {{ucresource}}")
		responses.HandleError(c, err)
		return
	}

	responses.SuccessJSON(c, http.StatusOK, "{{ucresource}} Created Sucessfully")
}

// GetAll{{ucresource}} -> Get All {{ucresource}}
// @Summary				Get all {{ucresource}}.
// @Param				pageSize query string false "4"
// @Param				page query string false "Page no"
// @Param				keyword query string false "search by name"
// @Description			Return all the {{ucresource}}
// @Produce				application/json
// @Param Authorization header string true "Insert your access token" default(Bearer <Add access token here>)
// @Tags				{{ucresource}}
// @Success 			200 {array} models.{{ucresource}}
// @Router				/{{pluralresourcetable}} [get]
func (cc {{ucresource}}Controller) GetAll{{ucresource}}(c *gin.Context) {
	pagination := utils.BuildPagination(c)
	pagination.Sort = "created_at desc"

	{{plcresource}}, count, err := cc.{{ucresource}}Service.GetAll{{ucresource}}(pagination)
	if err != nil {
		cc.logger.Zap.Error("Error finding {{ucresource}} records", err.Error())
		err := errors.InternalError.Wrap(err, "Failed To Find {{ucresource}}")
		responses.HandleError(c, err)
		return
	}

	responses.JSONCount(c, http.StatusOK, {{plcresource}}, count)
}

// GetOne{{ucresource}} -> Get One {{ucresource}}
// @Summary				Get one {{ucresource}} by id
// @Description			Get one {{ucresource}} by id
// @Param Authorization header string true "Insert your access token" default(Bearer <Add access token here>)
// @Produce				application/json
// @Tags				{{ucresource}}
// @Success 			200 {object} models.Admin
// @Router				/{{pluralresourcetable}}/{id} [get]
func (cc {{ucresource}}Controller) GetOne{{ucresource}}(c *gin.Context) {
	ID, _ := strconv.ParseInt(c.Param("id"), 10, 64)

	{{lcresource}}, err := cc.{{ucresource}}Service.GetOne{{ucresource}}(ID)
	if err != nil {
		cc.logger.Zap.Error("Error [GetOne{{ucresource}}] [db GetOne{{ucresource}}]: ", err.Error())
		err := errors.InternalError.Wrap(err, "Failed To Find {{ucresource}}")
		responses.HandleError(c, err)
		return
	}

	responses.JSON(c, http.StatusOK, {{lcresource}})
}

// UpdateOne{{ucresource}} -> Update One {{ucresource}} By Id
// @Summary				Update One {{ucresource}} By Id
// @Description			Update One {{ucresource}} By Id
// @Param Authorization header string true "Insert your access token" default(Bearer <Add access token here>)
// @Param				JSON body string true "Enter JSON" SchemaExample()
// @Produce				application/json
// @Tags				{{ucresource}}
// @Success 			200 {object} responses.Success
// @Router				/{{pluralresourcetable}}/{id} [put]
func (cc {{ucresource}}Controller) UpdateOne{{ucresource}}(c *gin.Context) {
	ID, _ := strconv.ParseInt(c.Param("id"), 10, 64)
	{{lcresource}} := models.{{ucresource}}{}

	if err := c.ShouldBindJSON(&{{lcresource}}); err != nil {
		cc.logger.Zap.Error("Error [Update{{ucresource}}] (ShouldBindJson) : ", err)
		err := errors.BadRequest.Wrap(err, "failed to update {{lcresource}}")
		responses.HandleError(c, err)
		return
	}
	{{lcresource}}.ID = ID

	if err := cc.{{ucresource}}Service.UpdateOne{{ucresource}}({{lcresource}}); err != nil {
		cc.logger.Zap.Error("Error [Update{{ucresource}}] [db Update{{ucresource}}]: ", err.Error())
		err := errors.InternalError.Wrap(err, "failed to update {{lcresource}}")
		responses.HandleError(c, err)
		return
	}

	responses.SuccessJSON(c, http.StatusOK, "{{ucresource}} Updated Sucessfully")
}

// DeleteOne{{ucresource}} -> Delete One {{ucresource}} By Id
// @Summary				Delete One {{ucresource}} By Id
// @Description			Delete One {{ucresource}} By Id
// @Param Authorization header string true "Insert your access token" default(Bearer <Add access token here>)
// @Produce				application/json
// @Tags				{{ucresource}}
// @Success 			200 {object} responses.Success
// @Router				/{{pluralresourcetable}}/{id} [delete]
func (cc {{ucresource}}Controller) DeleteOne{{ucresource}}(c *gin.Context) {
	ID, _ := strconv.ParseInt(c.Param("id"), 10, 64)

	err := cc.{{ucresource}}Service.DeleteOne{{ucresource}}(ID)
	if err != nil {
		cc.logger.Zap.Error("Error [DeleteOne{{ucresource}}] [db DeleteOne{{ucresource}}]: ", err.Error())
		err := errors.InternalError.Wrap(err, "Failed to Delete {{ucresource}}")
		responses.HandleError(c, err)
		return
	}

	responses.SuccessJSON(c, http.StatusOK, "{{ucresource}} Deleted Sucessfully")
}
