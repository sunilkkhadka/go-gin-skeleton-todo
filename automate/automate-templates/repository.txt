package repository

import (
	"{{project_name}}/infrastructure"
	"{{project_name}}/models"
	"{{project_name}}/utils"
)

// {{uc_resource}}Repository database structure
type {{uc_resource}}Repository struct {
	db     infrastructure.Database
	logger infrastructure.Logger
}

// New{{uc_resource}}Repository creates a new {{uc_resource}} repository
func New{{uc_resource}}Repository(db infrastructure.Database, logger infrastructure.Logger) {{uc_resource}}Repository {
	return {{uc_resource}}Repository{
		db:     db,
		logger: logger,
	}
}


// Create {{uc_resource}}
func (c {{uc_resource}}Repository) Create({{uc_resource}} models.{{uc_resource}}) (models.{{uc_resource}}, error) {
	return {{uc_resource}}, c.db.DB.Create(&{{uc_resource}}).Error
}

// GetAll{{uc_resource}} Get All {{plc_resource}}
func (c {{uc_resource}}Repository) GetAll{{uc_resource}}(pagination utils.Pagination) ([]models.{{uc_resource}}, int64, error) {
	var {{plc_resource}} []models.{{uc_resource}}
	var totalRows int64 = 0
	queryBuilder := c.db.DB.Model(&models.{{uc_resource}}{}).Offset(pagination.Offset).Order(pagination.Sort)

	if !pagination.All{
		queryBuilder=queryBuilder.Limit(pagination.PageSize)
	}

	if pagination.Keyword != "" {
		searchQuery := "%" + pagination.Keyword + "%"
		queryBuilder.Where(c.db.DB.Where("`{{resource_table}}`.`title` LIKE ?", searchQuery))
	}

	err := queryBuilder.
		Find(&{{plc_resource}}).
		Offset(-1).
		Limit(-1).
		Count(&totalRows).Error
	return {{plc_resource}}, totalRows, err
}

// GetOne{{uc_resource}} Get One {{uc_resource}} By Id
func (c {{uc_resource}}Repository) GetOne{{uc_resource}}(ID int64) (models.{{uc_resource}}, error) {
	{{uc_resource}} := models.{{uc_resource}}{}
	return {{uc_resource}}, c.db.DB.
		Where("id = ?", ID).First(&{{uc_resource}}).Error
}

// UpdateOne{{uc_resource}} Update One {{uc_resource}} By Id
func (c {{uc_resource}}Repository) UpdateOne{{uc_resource}}({{uc_resource}} models.{{uc_resource}}) error {
	return c.db.DB.Model(&models.{{uc_resource}}{}).
		Where("id = ?", {{uc_resource}}.ID).
		Updates(map[string]interface{}{
			"title":           {{uc_resource}}.Title,
		}).Error
}

// DeleteOne{{uc_resource}} Delete One {{uc_resource}} By Id
func (c {{uc_resource}}Repository) DeleteOne{{uc_resource}}(ID int64) error {
	return c.db.DB.
		Where("id = ?", ID).
		Delete(&models.{{uc_resource}}{}).
		Error
}
